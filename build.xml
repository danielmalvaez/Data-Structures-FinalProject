<?xml version="1.0" encoding="UTF-8"?>
<!-- Builder for compile with ANT my project of Data Structures
List of commands this builder contains:
    * clean - Delete all the files created on build dir.
    * build - Compiles the *.java files in *.class.
    * jar - Compiles the *.java files and save them in an executable *.jar file.
    * doc - Creates all the Javadoc files of the project.
* Author: Axel Daniel Malváez Flores
* Version: 1.0 July 31st, 2021.
-->
<!-- Set the project name-->
<project name="InterfacesJavaProject" default="default" basedir=".">
    <description>Builds, tests, and runs the project InterfacesJavaProject.</description>
    
    <!-- New command-->
    <target name="clean" >
        <delete dir="build" />
        <delte dir="doc" />
    </target>
    
    <!-- New command-->
    <target name="build" >
        <mkdir dir="build/classes" />
        <javac srcdir="src" destdir="build/classes" debug="true" debuglevel="lines,vars,source" >
        </javac>
    </target>
    
    <!-- New command-->
    <target name="jar" >
      <antcall target="build" />
      <mkdir dir="build/jar" />
      <!-- TODO cambiar el nombre del JAR -->
      <jar destfile="build/jar/DMotorBusqueda.jar" basedir="build/classes" >
        <manifest >
      <attribute name="DependencyFinder" value="main" />
      <!-- TODO SET MAIN CLASS -->
      <attribute name="Main-Class" value="fciencias.edatos.motorBusqueda.MotorBusqueda" />
        </manifest >
      </jar >
    </target>
    
    <!-- New command-->
    <target name="run" >
      <!-- TODO usar el nombre del JAR que será generado -->
      <java jar="build/jar/DMotorBusqueda.jar" fork="true" >
      </java>
    </target >

    <!-- New command-->
    <target name="doc" >
      <mkdir dir="doc" />
      <!-- TODO usar nombres apropiados para la documentación -->
      <javadoc sourcepath="src" destdir="doc" access="private" windowtitle="Administrador" doctitle="Administrador" author="true" version="true" >
        <classpath >
        </classpath >
      </javadoc>
    </target >
    
</project>

<!--
<project name="InterfacesJavaProject" default="default" basedir=".">
    <description>Builds, tests, and runs the project InterfacesJavaProject.</description>
     <import file="nbproject/build-impl.xml"/>
    

    There exist several targets which are by default empty and which can be
    used for execution of your tasks. These targets are usually executed
    before and after some main targets. They are:

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported
    nbproject/build-impl.xml file.


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are:

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building
      run:                      execution of project
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="InterfacesJavaProject-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on
    the compile target as the regular run target does. Again, for a list of available
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file.

    
    </project>
    -->

